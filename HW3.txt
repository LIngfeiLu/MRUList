CSE 12 Homework 3
Zhiyu Mao
A99070381
Section: B00
April 21, 2015

Part 1A
1.	True
2.	True
3.	False
4.	False
5.	False
6.	True
7.	False
8.	True
9.	False
10.	False
11.	True
12.	True
13.	True
14.	True
15.	False
16.	True
17.	False
18.	True

Part 1B

1. for ( int i = 0; i < n; i+=2 )
    sum++;

Running Time: O(n)
Explanation: The for loop will run n/2 times. Each time it executes 1 instruction in the loop header and i instruction in the body of the loop. The total number of instruction is 2*(n/2) + 1 ( for the last loop check) = n + 1 = O(n).

2. for ( int i = 1; i < n; i*=2 )
    sum++;

Running Time: O(log2(n))
Explanation: The i in the for loop double each time, so the for loop will run log2(n) times, plus the body part, the total number of instruction is 2*(log2(n)) + 1 = O(log2(n)).

3. for (int i = 0; i < n; i++)
   		for (int j = 0; j < n; j++)
   			sum++;
Running time: O(n^2)
Explanation: The first for loop will run n times and its nested for loop will run n times, too. So, the total is O(n^2) times.

4. for ( int i = 0; i < n; i++ )
    	sum++;
   for ( int j = 0; j < n; j++ )
    	sum++;
Running time: O(n)
Explanation: Because the second loop is not nested, after the first loop run n times, the second loop still will run n times, so n + n = O(n) times.

5. for ( int i = 0; i < 2*n; i++ )
       sum++;
Running time: O(n)
The single for loop will run 2*n times. Each time the loop runs it executes 2 instructions, so the total is 2* 2*n = O(n).

6.for ( int i = 0; i < n*n; i++ )
    sum++;
Running time:O(n^2)
Explanation: Because i will increase until i < n^2, so the total times that loop will run is n^2. And then the total number of instructions, including the body part of for is 2*n^2 = O(n^2).

7.
for ( int i = 0; i < n; i++ )
    for ( int j = 0; j < n*n; j++ )
        sum++;
Running time:O(n^3)
Explanation: The first loop will run n times, and the second will run n^2 times, so the total is n^3 = O(n^3) time.

8.
for ( int i = 0; i < n; i++ )
    for ( int j = 0; j < 10000; j++ )
        sum++;
Running time:O(n)
Explanation: The first loop will run n times, and the second will run 10000 times, so the total is n*10000 = O(n).

Part 2

1. Making a copy of the list.
Running time: Ω(n)
Explanation: In a for loop, create node and assign value to corresponding position node unitl the new linked size is equal to the original. The for loop will run n times to create and copy all of the nodes. So the total time is Ω(n).

2.Adding a value to the end of the list
Running time: Ω(1)
Explanation: First need to create a new node and linked it to the last element and tail, and then assign value to it. This takes somewhere around 10 steps to perform and 10 = Ω(1).

3.Removing the first value from the list
Running time: Ω(1)
Explanation: First need to create a new node and set head's next node's previous node to the new node and linked head to the new node, and finally assign data to new node. This takes around 4 steps and 4 = Ω(1).

4.Removing the last value from the list
Running time: Ω(1)
Explanation: First need to create a new node and set tail's previous node's next to the new node and linked new node to tail, and finally assign data to new node, this takes around 4 steps and 4 = Ω(1).

5.Determining whether the list contains some value V
Running time: Ω(n)
Explanation: Because the list is not sorted, we can only use linear search to find the value in linked list, there are n elements, so the running time = O(n).

Part 3
Question 1:
A:
MaxdeMacBook-Pro:desktop MaxMao$ wc -w medium-wordlist.txt
  119805 medium-wordlist.txt
"-w" gives the number of words in the text.

B:
main()
doLoops(MyLinkedList, wordlist, input file, loop bounds and steps) 
/* The doLoops method will pass six variables, the storageType, wordlist, document, numwords, increment and reps. Method will create a storage to save different collections of strings according to the passed storageType, and then call the doWork method.
*/
	doWork(storage, wordlist, document, numwords) 
	/* doWork will first call readDictionary method, passing new created storage and original wordlist to it
	*/
		readDictionary( items, wordlist ) 
		/* The readDictionary will input the wordlist into a bufferedreader
		*/
			items.clear() 
			/* And clear the items, which is the storage passed by doWork, because the doWork method will repeat several times according to the reps.
			*/
			CollectionTimer.trimPunctuation(word) 
			/* remove all the non-letters or numbers to ensure at the start and end of each word, ensuring the items will add String type and not generating any error
			*/
			items.add(word) 
			/* each new trimmed word will be added to the items so that it can be compared to the document
			*/
		System.currentTimeMillis();
		/* Recording the time right before searching and comparing the words.
		*/
		goodwords.add(word) or badwords.add(word) 
		/* The doWork then will compare the words in items and document word by word, if the word exists, it will be added to goodwords and number of goodwords will plus one, if not, it will be added to badwords.
		*/
		System.currentTimeMillis();
		/* Recording the time right after searching and comparing the words.
		*/

doLoops(MRUList, <same parameters as previous call)
<same call outline as above, detail is not needed>

C:
HashSet is defined in java.util.*. Implements the Collection interface. Because the add method implemented in HashSet will only add non-existed element to the array, when same element is added to the array, the method return false but still add one to good or bad. Finally, the goodwords.size() will be less than the good.

D:
It will not make difference to the overall performace. Because words will still word-to-word compare in the system. A word with first alphatic "a" will still compare to the first alphatic "z".

Question 2:
MaxdeMacBook-Pro:desktop MaxMao$ java hw3.CollectionTimer small-wordlist.txt pride-and-prejudice.txt
Wordlist: small-wordlist.txt  Document: pride-and-prejudice.txt
Class: MyLinkedList
=======================================
  1:    5000 words in     415 milliseconds
  2:   10000 words in     666 milliseconds
  3:   15000 words in    1172 milliseconds
  4:   20000 words in    1337 milliseconds
  5:   25000 words in    1533 milliseconds

Wordlist: small-wordlist.txt  Document: pride-and-prejudice.txt
Class: MRUList
=======================================
  1:    5000 words in     284 milliseconds
  2:   10000 words in     613 milliseconds
  3:   15000 words in     626 milliseconds
  4:   20000 words in     693 milliseconds
  5:   25000 words in     747 milliseconds

Question 3:
For the MyLinkedList, the running time is almost linear, because of it almost will search the whole "items" list find the matching words. For MRUList, because the high frequency words have been put ahead in the "items", when process the "if (items.contains(word))", the system will not search the whole list to find the match word. Thus, after some repetitions, the running time is more like log curve.

Question 4:
MaxdeMacBook-Pro:desktop MaxMao$ java hw3.CollectionTimer medium-wordlist.txt pride-and-prejudice.txt 5000 5000 5 3
Wordlist: medium-wordlist.txt  Document: pride-and-prejudice.txt
Class: MyLinkedList
=======================================
  1:    5000 words in    7702 milliseconds
  2:   10000 words in   31749 milliseconds
  3:   15000 words in   72610 milliseconds
  4:   20000 words in   73786 milliseconds
  5:   25000 words in  115379 milliseconds

Wordlist: medium-wordlist.txt  Document: pride-and-prejudice.txt
Class: MRUList
=======================================
  1:    5000 words in    5941 milliseconds
  2:   10000 words in   12439 milliseconds
  3:   15000 words in   17715 milliseconds
  4:   20000 words in   17214 milliseconds
  5:   25000 words in   23187 milliseconds

The running time increase a lot, because the number of elements in "items" increase a lot, the elements need to compare increase a lot.

Question 5:
MaxdeMacBook-Pro:desktop MaxMao$ java hw3.CollectionTimer pride-and-prejudice.txt pride-and-prejudice.txt
Wordlist: pride-and-prejudice.txt  Document: pride-and-prejudice.txt
Class: MyLinkedList
=======================================
  1:    5000 words in      58 milliseconds
  2:   10000 words in     168 milliseconds
  3:   15000 words in     450 milliseconds
  4:   20000 words in     666 milliseconds
  5:   25000 words in    1471 milliseconds

Wordlist: pride-and-prejudice.txt  Document: pride-and-prejudice.txt
Class: MRUList
=======================================
  1:    5000 words in    1972 milliseconds
  2:   10000 words in    4198 milliseconds
  3:   15000 words in    4943 milliseconds
  4:   20000 words in    7719 milliseconds
  5:   25000 words in    6890 milliseconds

We find now the MRUList is much slower. Because now the wordlist and document are the same, so the order of the words are the same. The if (items.contains(word)) will quickly process. However, the MRUList change the order of the words, so when processing, the system need to search the whole "items" list to find the matching word.















